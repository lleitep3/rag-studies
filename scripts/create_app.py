#!/usr/bin/env python3
"""
üõ†Ô∏è RAG App Generator
====================

Script para criar a estrutura b√°sica de um novo app no projeto RAG Study.
Gera automaticamente todos os arquivos necess√°rios com uma estrutura padr√£o.
"""

import os
import sys
import argparse
from pathlib import Path
from datetime import datetime
from typing import Optional

# Adiciona src ao path para usar ColoredOutput
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from src.helpers.colored_output import ColoredOutput


class AppGenerator:
    """Gerador de estrutura de apps RAG"""
    
    def __init__(self, app_name: str, app_type: str = "basic", author: str = "RAG Team"):
        """
        Inicializa o gerador.
        
        Args:
            app_name: Nome do app (ser√° usado como nome da pasta)
            app_type: Tipo de app (basic, chat, analysis, api)
            author: Nome do autor
        """
        self.app_name = app_name.lower().replace(" ", "-")
        self.app_title = " ".join(word.capitalize() for word in app_name.replace("-", " ").split())
        self.app_type = app_type
        self.author = author
        self.date = datetime.now().strftime("%Y-%m-%d")
        self.app_dir = project_root / "apps" / self.app_name
    
    def create_directory_structure(self) -> bool:
        """Cria a estrutura de diret√≥rios do app"""
        if self.app_dir.exists():
            ColoredOutput.error(f"App '{self.app_name}' j√° existe em {self.app_dir}")
            return False
        
        try:
            self.app_dir.mkdir(parents=True, exist_ok=True)
            ColoredOutput.success(f"Diret√≥rio criado: {self.app_dir}")
            return True
        except Exception as e:
            ColoredOutput.error(f"Erro ao criar diret√≥rio: {e}")
            return False
    
    def generate_main_py(self) -> str:
        """Gera o conte√∫do do arquivo main.py"""
        template = '''#!/usr/bin/env python3
"""
{emoji} {title}
{separator}

{description}

Criado em: {date}
Autor: {author}
"""

import sys
import os
import argparse
from pathlib import Path
from typing import Optional, Dict, Any

# Adiciona src ao path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from src.helpers.colored_output import ColoredOutput
from src.core.engine import create_rag_engine


class {class_name}:
    """Classe principal do {title}"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Inicializa o {title}.
        
        Args:
            config: Configura√ß√µes opcionais do app
        """
        self.config = config or {{}}
        self.engine = None
        self.is_initialized = False
        
        ColoredOutput.header("{title}")
        ColoredOutput.info(f"Vers√£o: 1.0.0")
        ColoredOutput.info(f"Tipo: {app_type}")
    
    def setup(self) -> bool:
        """Configura o ambiente e inicializa o engine RAG"""
        try:
            ColoredOutput.info("Inicializando sistema RAG...")
            
            # Cria o engine RAG
            self.engine = create_rag_engine(
                loader_type=self.config.get("loader_type", "python"),
                vector_store_type=self.config.get("vector_store_type", "chroma"),
                llm_type=self.config.get("llm_type", "ollama"),
                llm_kwargs={{"model_name": self.config.get("model_name", "llama3.2:1b")}}
            )
            
            # Indexa dados se necess√°rio
            if self.config.get("index_path"):
                stats = self.engine.setup_pipeline(
                    self.config["index_path"],
                    self.config.get("glob_pattern", "**/*.py")
                )
                ColoredOutput.success(f"Indexados {{stats['documents_loaded']}} documentos")
            
            self.is_initialized = True
            ColoredOutput.success("Sistema inicializado com sucesso!")
            return True
            
        except Exception as e:
            ColoredOutput.error(f"Erro na inicializa√ß√£o: {{e}}")
            return False
    
    def run(self) -> int:
        """Executa a l√≥gica principal do app"""
        if not self.is_initialized:
            if not self.setup():
                return 1
        
        try:
            ColoredOutput.section(
                "Executando {title}",
                "Este √© um template b√°sico. Customize este m√©todo para implementar sua l√≥gica."
            )
            
            {run_logic}
            
            return 0
            
        except KeyboardInterrupt:
            ColoredOutput.warning("\\nInterrompido pelo usu√°rio")
            return 0
        except Exception as e:
            ColoredOutput.error(f"Erro durante execu√ß√£o: {{e}}")
            return 1
    
    def cleanup(self):
        """Limpa recursos antes de sair"""
        if self.engine:
            ColoredOutput.info("Limpando recursos...")
            # Adicione l√≥gica de limpeza aqui se necess√°rio
            
        ColoredOutput.success("At√© logo! üëã")


def parse_arguments():
    """Processa argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description="{title} - {description}",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        "--config",
        type=str,
        help="Arquivo de configura√ß√£o JSON (opcional)"
    )
    
    parser.add_argument(
        "--index-path",
        type=str,
        help="Caminho para indexar documentos"
    )
    
    parser.add_argument(
        "--model",
        type=str,
        default="llama3.2:1b",
        help="Modelo LLM a usar (default: llama3.2:1b)"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="Modo verboso"
    )
    
    return parser.parse_args()


def load_config(args) -> Dict[str, Any]:
    """Carrega configura√ß√£o dos argumentos ou arquivo"""
    config = {{}}
    
    # Se um arquivo de config foi especificado
    if args.config:
        import json
        try:
            with open(args.config, 'r') as f:
                config = json.load(f)
            ColoredOutput.success(f"Configura√ß√£o carregada de {{args.config}}")
        except Exception as e:
            ColoredOutput.warning(f"Erro ao carregar config: {{e}}")
    
    # Sobrescreve com argumentos da linha de comando
    if args.index_path:
        config["index_path"] = args.index_path
    if args.model:
        config["model_name"] = args.model
    config["verbose"] = args.verbose
    
    return config


def main():
    """Fun√ß√£o principal"""
    args = parse_arguments()
    config = load_config(args)
    
    app = {class_name}(config)
    return app.run()


if __name__ == "__main__":
    sys.exit(main())
'''
        
        # Customiza√ß√µes baseadas no tipo
        emoji = "üöÄ"
        description = f"Aplica√ß√£o RAG do tipo {self.app_type}"
        run_logic = ""
        
        if self.app_type == "chat":
            emoji = "üí¨"
            description = "Aplica√ß√£o de chat interativo com RAG"
            run_logic = '''# Loop de chat
            ColoredOutput.info("Digite 'sair' para encerrar\\n")
            
            while True:
                user_input = input("\\nüë§ Voc√™: ").strip()
                
                if user_input.lower() in ['sair', 'exit', 'quit']:
                    break
                
                if not user_input:
                    continue
                
                # Processa com RAG
                ColoredOutput.info("Processando...")
                result = self.engine.ask(user_input) if self.engine else {"answer": "Engine n√£o inicializado"}
                
                # Exibe resposta
                ColoredOutput.answer(f"\\n{result['answer']}")'''
        
        elif self.app_type == "analysis":
            emoji = "üìä"
            description = "Aplica√ß√£o de an√°lise de dados com RAG"
            run_logic = '''# An√°lise de dados
            ColoredOutput.info("Iniciando an√°lise...")
            
            # TODO: Implementar l√≥gica de an√°lise
            ColoredOutput.progress(50, 100, "An√°lise")
            
            ColoredOutput.section(
                "Resultados",
                "Implemente aqui a l√≥gica de an√°lise espec√≠fica"
            )'''
        
        elif self.app_type == "api":
            emoji = "üåê"
            description = "API REST com capacidades RAG"
            run_logic = '''# API setup
            ColoredOutput.info("API endpoint seria configurado aqui")
            ColoredOutput.warning("Este √© um template - implemente FastAPI ou Flask")
            
            # Exemplo de endpoint simulado
            ColoredOutput.table_row("Endpoint", "M√©todo", "Descri√ß√£o", widths=[20, 10, 30])
            ColoredOutput.table_row("-"*20, "-"*10, "-"*30, widths=[20, 10, 30])
            ColoredOutput.table_row("/ask", "POST", "Fazer pergunta ao RAG", widths=[20, 10, 30])
            ColoredOutput.table_row("/index", "POST", "Indexar novos documentos", widths=[20, 10, 30])'''
        
        else:  # basic
            emoji = "üéØ"
            run_logic = '''# Exemplo b√°sico
            if self.engine:
                question = "O que √© RAG?"
                ColoredOutput.question(f"Pergunta: {question}")
                
                result = self.engine.ask(question)
                ColoredOutput.answer(f"Resposta: {result.get('answer', 'Sem resposta')}")
            else:
                ColoredOutput.warning("Engine n√£o inicializado - implemente sua l√≥gica aqui")'''
        
        class_name = "".join(word.capitalize() for word in self.app_name.split("-")) + "App"
        
        return template.format(
            emoji=emoji,
            title=self.app_title,
            separator="=" * (len(self.app_title) + 3),
            description=description,
            date=self.date,
            author=self.author,
            class_name=class_name,
            app_type=self.app_type,
            run_logic=run_logic
        )
    
    def generate_readme(self) -> str:
        """Gera o conte√∫do do README.md"""
        emoji_map = {
            "chat": "üí¨",
            "analysis": "üìä",
            "api": "üåê",
            "basic": "üéØ"
        }
        
        template = '''# {emoji} {title}

> **{description}**

## üìã Sobre

Este app foi gerado automaticamente em {date} usando o RAG App Generator.
√â um template do tipo **{app_type}** pronto para ser customizado.

## üöÄ Como Usar

### Instala√ß√£o
```bash
# Navegue para a pasta do app
cd apps/{app_name}

# Instale as depend√™ncias (se necess√°rio)
pip install -r requirements.txt
```

### Execu√ß√£o B√°sica
```bash
python main.py
```

### Com Par√¢metros
```bash
# Indexar documentos
python main.py --index-path ../../src --model llama3.2:1b

# Modo verboso
python main.py --verbose

# Com arquivo de configura√ß√£o
python main.py --config config.json
```

## ‚öôÔ∏è Configura√ß√£o

Crie um arquivo `config.json` (opcional):
```json
{{
    "loader_type": "python",
    "vector_store_type": "chroma",
    "llm_type": "ollama",
    "model_name": "llama3.2:1b",
    "index_path": "../../src",
    "glob_pattern": "**/*.py",
    "verbose": true
}}
```

## üèóÔ∏è Estrutura

```
{app_name}/
‚îú‚îÄ‚îÄ main.py              # Script principal
‚îú‚îÄ‚îÄ README.md           # Esta documenta√ß√£o
‚îú‚îÄ‚îÄ requirements.txt    # Depend√™ncias Python
‚îî‚îÄ‚îÄ config.json        # Configura√ß√£o (opcional)
```

## üéØ Funcionalidades

{features}

## üîß Customiza√ß√£o

Para customizar este app:

1. **Modifique `main.py`**:
   - M√©todo `run()` - Implementar l√≥gica principal
   - M√©todo `setup()` - Configurar inicializa√ß√£o
   - Adicionar novos m√©todos conforme necess√°rio

2. **Adicione novos m√≥dulos**:
   - Crie arquivos Python adicionais
   - Importe no `main.py`

3. **Atualize depend√™ncias**:
   - Adicione pacotes necess√°rios em `requirements.txt`

## üìù TODO

- [ ] Implementar l√≥gica espec√≠fica do app
- [ ] Adicionar tratamento de erros robusto
- [ ] Criar testes unit√°rios
- [ ] Adicionar logging
- [ ] Documentar APIs/interfaces

## ü§ù Contribuindo

Para contribuir com este app:
1. Implemente as funcionalidades pendentes
2. Adicione testes
3. Atualize a documenta√ß√£o
4. Fa√ßa um PR

## üìÑ Licen√ßa

Parte do projeto RAG Study - {author}

---

**Criado em:** {date}  
**Tipo:** {app_type}  
**Vers√£o:** 1.0.0
'''
        
        features = {
            "chat": """- ‚úÖ Chat interativo com RAG
- ‚úÖ Hist√≥rico de conversas
- ‚úÖ Comandos especiais
- üîÑ Contexto persistente (TODO)
- üîÑ Export de conversas (TODO)""",
            
            "analysis": """- ‚úÖ An√°lise de documentos
- ‚úÖ Extra√ß√£o de insights
- ‚úÖ Relat√≥rios formatados
- üîÑ Visualiza√ß√µes (TODO)
- üîÑ Export para PDF/HTML (TODO)""",
            
            "api": """- ‚úÖ Endpoints REST
- ‚úÖ Autentica√ß√£o b√°sica
- ‚úÖ Rate limiting
- üîÑ WebSocket support (TODO)
- üîÑ GraphQL interface (TODO)""",
            
            "basic": """- ‚úÖ Template b√°sico funcional
- ‚úÖ Integra√ß√£o com RAG Engine
- ‚úÖ Output colorido
- üîÑ Funcionalidades espec√≠ficas (TODO)
- üîÑ Configura√ß√£o avan√ßada (TODO)"""
        }
        
        return template.format(
            emoji=emoji_map.get(self.app_type, "üéØ"),
            title=self.app_title,
            description=f"Aplica√ß√£o RAG do tipo {self.app_type}",
            date=self.date,
            app_type=self.app_type,
            app_name=self.app_name,
            features=features.get(self.app_type, features["basic"]),
            author=self.author
        )
    
    def generate_requirements(self) -> str:
        """Gera o conte√∫do do requirements.txt"""
        base_requirements = [
            "# Depend√™ncias b√°sicas do app",
            "# Gerado automaticamente - adicione conforme necess√°rio",
            "",
            "# Interface e formata√ß√£o",
            "rich>=13.0.0",
            "colorama>=0.4.6",
            "",
            "# Configura√ß√£o",
            "python-dotenv>=1.0.0",
            "pydantic>=2.0.0",
        ]
        
        # Adiciona depend√™ncias espec√≠ficas por tipo
        if self.app_type == "chat":
            base_requirements.extend([
                "",
                "# Chat espec√≠fico",
                "prompt-toolkit>=3.0.0",
            ])
        elif self.app_type == "analysis":
            base_requirements.extend([
                "",
                "# An√°lise espec√≠fica",
                "pandas>=2.0.0",
                "matplotlib>=3.5.0",
            ])
        elif self.app_type == "api":
            base_requirements.extend([
                "",
                "# API espec√≠fica",
                "fastapi>=0.100.0",
                "uvicorn>=0.23.0",
                "httpx>=0.24.0",
            ])
        
        return "\n".join(base_requirements)
    
    def generate_config_example(self) -> str:
        """Gera exemplo de configura√ß√£o JSON"""
        config = {
            "app_name": self.app_name,
            "app_type": self.app_type,
            "version": "1.0.0",
            "loader_type": "python",
            "vector_store_type": "chroma",
            "llm_type": "ollama",
            "model_name": "llama3.2:1b",
            "index_path": "../../src",
            "glob_pattern": "**/*.py",
            "verbose": False,
            "settings": {
                "temperature": 0.7,
                "max_tokens": 2000,
                "chunk_size": 1000,
                "chunk_overlap": 200
            }
        }
        
        import json
        return json.dumps(config, indent=2)
    
    def create_files(self) -> bool:
        """Cria todos os arquivos do app"""
        files = {
            "main.py": self.generate_main_py(),
            "README.md": self.generate_readme(),
            "requirements.txt": self.generate_requirements(),
            "config.example.json": self.generate_config_example(),
        }
        
        try:
            for filename, content in files.items():
                file_path = self.app_dir / filename
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                ColoredOutput.success(f"Arquivo criado: {filename}")
            
            # Torna main.py execut√°vel
            main_py = self.app_dir / "main.py"
            main_py.chmod(main_py.stat().st_mode | 0o111)
            
            return True
            
        except Exception as e:
            ColoredOutput.error(f"Erro ao criar arquivos: {e}")
            return False
    
    def generate(self) -> bool:
        """Gera o app completo"""
        ColoredOutput.header(f"Gerando App: {self.app_title}")
        
        # Cria diret√≥rio
        if not self.create_directory_structure():
            return False
        
        # Cria arquivos
        if not self.create_files():
            return False
        
        # Resumo final
        ColoredOutput.section(
            "‚úÖ App Criado com Sucesso!",
            f"""
Localiza√ß√£o: {self.app_dir}
Tipo: {self.app_type}
Arquivos criados: 4

Pr√≥ximos passos:
1. cd apps/{self.app_name}
2. pip install -r requirements.txt
3. python main.py --help
4. Customize conforme necess√°rio!
            """
        )
        
        return True


def main():
    """Fun√ß√£o principal do gerador"""
    parser = argparse.ArgumentParser(
        description="üõ†Ô∏è Gerador de Apps RAG - Cria estrutura b√°sica para novos apps",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  python create_app.py my-chat-app --type chat
  python create_app.py data-analyzer --type analysis --author "Jo√£o Silva"
  python create_app.py api-gateway --type api

Tipos dispon√≠veis:
  basic    - App b√°sico com template simples
  chat     - App de chat interativo
  analysis - App de an√°lise de dados
  api      - API REST com endpoints RAG
        """
    )
    
    parser.add_argument(
        "app_name",
        help="Nome do app (ser√° convertido para kebab-case)"
    )
    
    parser.add_argument(
        "--type",
        choices=["basic", "chat", "analysis", "api"],
        default="basic",
        help="Tipo de app a criar (default: basic)"
    )
    
    parser.add_argument(
        "--author",
        default="RAG Team",
        help="Nome do autor (default: RAG Team)"
    )
    
    parser.add_argument(
        "--force",
        action="store_true",
        help="Sobrescrever se o app j√° existir"
    )
    
    args = parser.parse_args()
    
    # Se --force, remove diret√≥rio existente
    if args.force:
        app_dir = Path(__file__).parent.parent / "apps" / args.app_name.lower().replace(" ", "-")
        if app_dir.exists():
            import shutil
            shutil.rmtree(app_dir)
            ColoredOutput.warning(f"Diret√≥rio existente removido: {app_dir}")
    
    # Cria o gerador e executa
    generator = AppGenerator(
        app_name=args.app_name,
        app_type=args.type,
        author=args.author
    )
    
    success = generator.generate()
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())