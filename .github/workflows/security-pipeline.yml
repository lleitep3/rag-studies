name: 🔒 Security & Quality Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa semanalmente às segundas 02:00 UTC para verificação contínua
    - cron: '0 2 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==========================================
  # 📋 SETUP E VALIDAÇÕES BÁSICAS
  # ==========================================
  setup:
    name: 🔧 Setup & Basic Validation
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      cache-key: ${{ steps.setup.outputs.cache-key }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 💾 Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: pip-
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep pytest pytest-cov flake8 mypy
        
    - name: ✅ Validate project structure
      run: |
        echo "🔍 Validating project structure..."
        test -f requirements.txt || (echo "❌ requirements.txt missing" && exit 1)
        test -d src || (echo "❌ src directory missing" && exit 1)
        test -f README.md || (echo "❌ README.md missing" && exit 1)
        echo "✅ Project structure validated"
        
    - name: 📊 Set outputs
      id: setup
      run: |
        echo "python-version=3.11" >> $GITHUB_OUTPUT
        echo "cache-key=pip-${{ hashFiles('**/requirements.txt') }}" >> $GITHUB_OUTPUT

  # ==========================================
  # 🔍 ANÁLISE ESTÁTICA DE CÓDIGO (SAST)
  # ==========================================
  sast:
    name: 🔍 Static Analysis Security Testing (SAST)
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: 💾 Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        
    - name: 📦 Install SAST tools
      run: |
        pip install bandit[toml] semgrep safety mypy flake8 pylint
        
    # Bandit - Security linter específico para Python
    - name: 🛡️ Run Bandit (Security Linter)
      run: |
        echo "🔍 Running Bandit security analysis..."
        bandit -r src/ apps/ -f json -o bandit-report.json || true
        bandit -r src/ apps/ -f txt
        
    - name: 📤 Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json
        
    # Semgrep - Static analysis com regras de segurança
    - name: ⚡ Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/bandit
        generateSarif: "1"
        
    - name: 📤 Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    # MyPy - Type checking
    - name: 🔤 Run MyPy (Type Analysis)
      run: |
        echo "🔤 Running MyPy type analysis..."
        mypy src/ --ignore-missing-imports --show-error-codes --no-strict-optional || true
        
    # Pylint - Code quality e security patterns
    - name: 📝 Run Pylint
      run: |
        echo "📝 Running Pylint analysis..."
        pylint src/ --output-format=json --reports=y > pylint-report.json || true
        pylint src/ --output-format=text
        
    - name: 📤 Upload Pylint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-results
        path: pylint-report.json

  # ==========================================
  # 🚨 ANÁLISE DE VULNERABILIDADES
  # ==========================================
  vulnerability-scan:
    name: 🚨 Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: 💾 Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install safety pip-audit
        
    # Safety - Vulnerabilidades conhecidas em dependências
    - name: 🔒 Run Safety (Dependency Vulnerabilities)
      run: |
        echo "🔒 Scanning for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check --output text
        
    - name: 📤 Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: safety-report.json
        
    # Pip-audit - Scanner oficial do PyPA
    - name: 🔍 Run Pip-Audit
      run: |
        echo "🔍 Running pip-audit scan..."
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=columns
        
    - name: 📤 Upload Pip-Audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pip-audit-results
        path: pip-audit-report.json
        
    # GitHub Security Advisory
    - name: 🛡️ GitHub Security Advisory
      uses: github/codeql-action/init@v2
      with:
        languages: python
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ==========================================
  # 🧪 TESTES E COBERTURA
  # ==========================================
  testing:
    name: 🧪 Testing & Coverage
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: 💾 Restore cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}
        
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock coverage[toml]
        
    # Criação de testes básicos se não existirem
    - name: 🔍 Check for tests
      id: test-check
      run: |
        if [ ! -d "tests" ] && [ ! -f "test_*.py" ]; then
          echo "⚠️ No tests found. Creating basic test structure..."
          mkdir -p tests
          cat > tests/test_basic.py << 'EOF'
        """Basic tests for project structure"""
        import pytest
        import os
        from pathlib import Path

        def test_project_structure():
            """Test basic project structure exists"""
            assert Path("src").exists(), "src directory should exist"
            assert Path("README.md").exists(), "README.md should exist"
            assert Path("requirements.txt").exists(), "requirements.txt should exist"

        def test_src_modules():
            """Test src modules can be imported"""
            src_path = Path("src")
            assert src_path.exists()
            
            # Check for main modules
            expected_modules = ["loaders", "llms", "vector_stores", "core"]
            for module in expected_modules:
                module_path = src_path / module
                if module_path.exists():
                    assert (module_path / "__init__.py").exists(), f"{module} should be a proper Python package"

        def test_apps_structure():
            """Test apps structure"""
            apps_path = Path("apps")
            if apps_path.exists():
                assert Path("apps/README.md").exists(), "apps should have README"
        EOF
          echo "created=true" >> $GITHUB_OUTPUT
        else
          echo "created=false" >> $GITHUB_OUTPUT
        fi
        
    # Executar testes
    - name: 🧪 Run tests with coverage
      run: |
        echo "🧪 Running tests with coverage..."
        if [ -d "tests" ] || ls test_*.py 2>/dev/null; then
          python -m pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing -v
        else
          echo "⚠️ No tests found to run"
        fi
        
    - name: 📤 Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-results
        path: |
          coverage.xml
          htmlcov/
          
    # Codecov integration (opcional)
    - name: 📊 Upload to Codecov
      uses: codecov/codecov-action@v3
      if: always() && hashFiles('coverage.xml') != ''
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ==========================================
  # 🌐 ANÁLISE DINÂMICA (DAST)
  # ==========================================
  dast:
    name: 🌐 Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: [setup, sast]
    if: always() && !cancelled()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.setup.outputs.python-version }}
        
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install requests flask fastapi uvicorn
        
    # Simulação de app web para DAST (se houver endpoints)
    - name: 🌐 Setup test server
      run: |
        echo "🌐 Setting up test server for DAST..."
        cat > test_server.py << 'EOF'
        """Simple test server for DAST analysis"""
        from flask import Flask, request, jsonify
        import threading
        import time

        app = Flask(__name__)

        @app.route('/health')
        def health():
            return {'status': 'healthy'}

        @app.route('/api/query', methods=['POST'])
        def query():
            data = request.get_json()
            return {'result': f"Processed: {data}"}

        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000, debug=False)
        EOF
        
        # Inicia servidor em background
        python test_server.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 5  # Aguarda servidor iniciar
        
    # OWASP ZAP Baseline scan
    - name: ⚡ OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'http://localhost:5000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    # Teste de endpoints básico
    - name: 🔍 Basic endpoint security test
      run: |
        echo "🔍 Testing basic endpoint security..."
        
        # Teste de SQL Injection básico
        curl -X POST http://localhost:5000/api/query \
          -H "Content-Type: application/json" \
          -d '{"query": "'; DROP TABLE users; --"}' || true
          
        # Teste de XSS básico
        curl -X POST http://localhost:5000/api/query \
          -H "Content-Type: application/json" \
          -d '{"query": "<script>alert('XSS')</script>"}' || true
          
        echo "✅ Basic DAST tests completed"
        
    - name: 🛑 Cleanup test server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  # ==========================================
  # 📊 RELATÓRIO CONSOLIDADO
  # ==========================================
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [sast, vulnerability-scan, testing, dast]
    if: always()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: 📊 Generate security report
      run: |
        echo "📊 Generating consolidated security report..."
        
        cat > security-report.md << 'EOF'
        # 🔒 Security Analysis Report
        
        ## 📋 Pipeline Summary
        - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Branch**: ${{ github.ref_name }}
        - **Commit**: ${{ github.sha }}
        - **Trigger**: ${{ github.event_name }}
        
        ## 🔍 Analysis Results
        
        ### ✅ Completed Scans:
        - 🛡️ **SAST (Static Analysis)**: Bandit, Semgrep, MyPy, Pylint
        - 🚨 **Vulnerability Scanning**: Safety, Pip-Audit, CodeQL
        - 🧪 **Testing**: Unit tests with coverage
        - 🌐 **DAST**: Basic endpoint testing
        
        ### 📁 Generated Artifacts:
        EOF
        
        # Lista todos os artefatos encontrados
        echo "- 📄 Generated artifacts:" >> security-report.md
        find . -name "*-results" -type d 2>/dev/null | while read dir; do
          echo "  - $(basename $dir)" >> security-report.md
        done
        
        # Adiciona métricas básicas se disponíveis
        if [ -f "coverage.xml" ]; then
          echo "- 📊 **Test Coverage**: Available" >> security-report.md
        fi
        
        echo "## 🎯 Next Steps" >> security-report.md
        echo "1. Review all uploaded artifacts for detailed findings" >> security-report.md
        echo "2. Address any HIGH or CRITICAL severity issues" >> security-report.md
        echo "3. Update dependencies if vulnerabilities found" >> security-report.md
        echo "4. Consider adding more comprehensive tests" >> security-report.md
        
        cat security-report.md
        
    - name: 📤 Upload consolidated report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
        
    # Comentário no PR com summary (se for PR)
    - name: 💬 Comment PR with security summary
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-report.md')) {
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

  # ==========================================
  # ✅ PIPELINE STATUS
  # ==========================================
  pipeline-status:
    name: ✅ Pipeline Status
    runs-on: ubuntu-latest
    needs: [setup, sast, vulnerability-scan, testing, dast, security-report]
    if: always()
    
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "🔒 Security Pipeline Completed!"
        echo "================================"
        echo "Setup: ${{ needs.setup.result }}"
        echo "SAST: ${{ needs.sast.result }}"
        echo "Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
        echo "Testing: ${{ needs.testing.result }}"
        echo "DAST: ${{ needs.dast.result }}"
        echo "Security Report: ${{ needs.security-report.result }}"
        echo "================================"
        
        # Falha se algum job crítico falhou
        if [[ "${{ needs.sast.result }}" == "failure" ]] || [[ "${{ needs.vulnerability-scan.result }}" == "failure" ]]; then
          echo "❌ Critical security checks failed!"
          exit 1
        else
          echo "✅ Security pipeline passed!"
        fi