name: 🔒 CI - Testes e Segurança

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permite execução manual

jobs:
  test-security:
    name: 🧪 Testes e Segurança
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false  # Continua executando outras versões mesmo se uma falhar
    
    steps:
      # 1. Checkout do código
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      # 2. Configurar Python
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      # 3. Instalar dependências
      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov bandit safety
      
      # 4. Executar testes unitários (sem dependências externas)
      - name: 🧪 Executar testes unitários
        run: |
          echo "### 🧪 Executando Testes Unitários" >> $GITHUB_STEP_SUMMARY
          pytest tests/ -v \
            -m "unit and not requires_ollama and not requires_chroma" \
            --tb=short \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml
          echo "✅ Testes unitários concluídos!" >> $GITHUB_STEP_SUMMARY
      
      # 5. Verificar vulnerabilidades de segurança no código
      - name: 🔒 Análise de segurança do código (Bandit)
        run: |
          echo "### 🔒 Análise de Segurança" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ -ll -i -f txt || true
          echo "Análise Bandit concluída" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
      
      # 6. Verificar vulnerabilidades nas dependências
      - name: 🔍 Verificar vulnerabilidades em dependências
        run: |
          echo "### 🔍 Vulnerabilidades em Dependências" >> $GITHUB_STEP_SUMMARY
          safety check --json || true
          echo "Verificação Safety concluída" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
      
      # 7. Upload de cobertura (apenas Python 3.11)
      - name: 📊 Upload cobertura
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true
